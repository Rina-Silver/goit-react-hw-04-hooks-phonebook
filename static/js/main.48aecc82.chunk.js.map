{"version":3,"sources":["components/Section/Section.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactItem.jsx","components/ContactList/ContactList.jsx","App.js","index.js"],"names":["Section","title","children","ContactForm","onSubmit","useState","name","setName","number","setNumber","inputNameId","uuidv4","inputNumberId","handleChange","e","currentTarget","value","reset","preventDefault","className","htmlFor","id","type","pattern","required","onChange","disabled","Filter","filter","filtered","ContactItem","onDelete","onClick","ContactList","contacts","length","map","App","JSON","parse","window","localStorage","getItem","setContacts","setFilter","useEffect","setItem","stringify","filteredContacts","normalizedFilter","toLowerCase","includes","getVisibleContacts","data","find","contact","alert","newContact","prevContacts","trim","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48aecc82.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nfunction Section({ title, children }) {\r\n    return (\r\n        <section>\r\n            {title && <h2>{title}</h2>} {children}\r\n        </section>\r\n    );\r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './ContactForm.scss';\r\n\r\nexport default function ContactForm({ onSubmit }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const inputNameId = uuidv4();\r\n  const inputNumberId = uuidv4();\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    onSubmit({ name, number });\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"PhonebookForm\">\r\n      <label htmlFor={inputNameId}>Name</label>\r\n      <input\r\n        id={inputNameId}\r\n        value={name}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        onChange={handleChange}\r\n      />\r\n      <label htmlFor={inputNumberId}>Number</label>\r\n      <input\r\n        id={inputNumberId}\r\n        value={number}\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        onChange={handleChange}\r\n      />\r\n      <button\r\n        className=\"Phonebook__btn\"\r\n        type=\"submit\"\r\n        disabled={!name || !number}\r\n      >\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\n// class ContactForm extends Component {\r\n//   state = {\r\n//     name: '',\r\n//     number: '',\r\n//   };\r\n\r\n//   inputNameId = uuidv4();\r\n//   inputNumberId = uuidv4();\r\n\r\n//   handleChange = e => {\r\n//     const { name, value } = e.currentTarget;\r\n//     this.setState({ [name]: value });\r\n//   };\r\n//   handleSubmit = e => {\r\n//     e.preventDefault();\r\n//     console.log(this.state);\r\n//     this.props.onSubmit(this.state);\r\n//     this.reset();\r\n//   };\r\n\r\n//   reset = () => {\r\n//     this.setState({\r\n//       name: '',\r\n//       number: '',\r\n//     });\r\n//   };\r\n\r\n//   render() {\r\n//     const { name, number } = this.state;\r\n//     return (\r\n//       <form onSubmit={this.handleSubmit} className=\"PhonebookForm\">\r\n//         <label htmlFor={this.inputNameId}>Name</label>\r\n//         <input\r\n//           id={this.inputNameId}\r\n//           value={name}\r\n//           type=\"text\"\r\n//           name=\"name\"\r\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//           title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//           required\r\n//           onChange={this.handleChange}\r\n//         />\r\n//         <label htmlFor={this.inputNumberId}>Number</label>\r\n//         <input\r\n//           id={this.inputNumberId}\r\n//           value={number}\r\n//           type=\"tel\"\r\n//           name=\"number\"\r\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//           title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//           required\r\n//           onChange={this.handleChange}\r\n//         />\r\n//         <button\r\n//           className=\"Phonebook__btn\"\r\n//           type=\"submit\"\r\n//           disabled={!name || !number}\r\n//         >\r\n//           Add contact\r\n//         </button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default ContactForm;\r\n","import PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './Filter.scss';\r\n\r\nconst Filter = ({ filter, filtered }) => {\r\n  const inputNameId = uuidv4();\r\n  return (\r\n    <>\r\n      <label htmlFor={inputNameId}>Find name</label>\r\n      <input\r\n        id={inputNameId}\r\n        name={filter}\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={filtered}\r\n        className=\"inputFilter\"\r\n      ></input>{' '}\r\n    </>\r\n  );\r\n};\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  filtered: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst ContactItem = ({ id, name, number, onDelete }) => {\r\n  return (\r\n    <>\r\n      <p>\r\n        🙂{name} 📞{number}\r\n      </p>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => onDelete(id)}\r\n        className=\"Contact__btn\"\r\n      >\r\n        Delete\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nContactItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","import PropTypes from 'prop-types';\r\nimport ContactItem from './ContactItem';\r\nimport './ContactList.scss';\r\n\r\nconst ContactList = ({ contacts, onDelete }) => {\r\n  return contacts.length > 0 ? (\r\n    <ul className=\"nameList\">\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li className=\"nameItem\" key={id}>\r\n          <ContactItem\r\n            name={name}\r\n            number={number}\r\n            id={id}\r\n            onDelete={onDelete}\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  ) : (\r\n    <>\r\n      <p>No contacts</p>\r\n    </>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }).isRequired,\r\n  ),\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import { useState, useEffect } from 'react';\nimport Section from 'components/Section';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default function App() {\n  const [contacts, setContacts] = useState(\n    JSON.parse(window.localStorage.getItem('contacts')) ?? [],\n  );\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const checkNameInBook = name => {\n    return contacts.find(contact => contact.name === name);\n  };\n\n  const formSubmitHandler = data => {\n    if (checkNameInBook(data.name)) {\n      alert(`${data.name} is already in Contactbook!`);\n      return;\n    }\n    // console.log(data);\n    const newContact = {\n      id: uuidv4(),\n      ...data,\n    };\n\n    setContacts(prevContacts => [newContact, ...prevContacts]);\n  };\n\n  const onChangeFilter = e => {\n    const { value } = e.currentTarget;\n    setFilter(value.trim());\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  const filteredContacts = getVisibleContacts();\n\n  const removeContact = id => {\n    setContacts(prevContacts =>\n      prevContacts.filter(contact => contact.id !== id),\n    );\n  };\n\n  return (\n    <div className=\"Container\">\n      <Section title=\"Phonebook\">\n        <ContactForm onSubmit={formSubmitHandler} />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter filter={filter} filtered={onChangeFilter} />\n        <ContactList contacts={filteredContacts} onDelete={removeContact} />\n      </Section>\n    </div>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   };\n//   componentDidMount() {\n//     console.log('App componentDidMount');\n\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     console.log('App componentDidUpdate');\n//     const nextContacts = this.state.contacts;\n//     const prevContacts = prevState.contacts;\n\n//     if (nextContacts !== prevContacts) {\n//       console.log('Обновилось поле contacts, записываю contacts в хранилище');\n//       localStorage.setItem('contacts', JSON.stringify(nextContacts));\n//     }\n//   }\n\n//   checkNameInBook = name => {\n//     const { contacts } = this.state;\n//     return contacts.find(contact => contact.name === name);\n//   };\n\n//   formSubmitHandler = data => {\n//     if (this.checkNameInBook(data.name)) {\n//       alert(`${data.name} is already in Contactbook!`);\n//       return;\n//     }\n//     // console.log(data);\n//     const newContact = {\n//       id: uuidv4(),\n//       ...data,\n//     };\n\n//     this.setState(prevState => ({\n//       contacts: [newContact, ...prevState.contacts],\n//     }));\n//   };\n\n//   onChangeFilter = e => {\n//     const { value } = e.currentTarget;\n//     this.setState({ filter: value.trim() });\n//   };\n\n//   getVisibleContacts = () => {\n//     const { contacts, filter } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n//     return contacts.filter(({ name }) =>\n//       name.toLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   removeContact = id => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== id),\n//     }));\n//   };\n\n//   render() {\n//     const { filter } = this.state;\n//     //    const normalizedFilter = filter.toLowerCase();\n//     //    const filteredContacts = contacts.filter(({ name }) =>\n//     //      name.toLowerCase().includes(normalizedFilter),\n//     //    );\n//     const filteredContacts = this.getVisibleContacts();\n\n//     return (\n//       <div className=\"Container\">\n//         <Section title=\"Phonebook\">\n//           <ContactForm onSubmit={this.formSubmitHandler} />\n//         </Section>\n//         <Section title=\"Contacts\">\n//           <Filter filter={filter} filtered={this.onChangeFilter} />\n//           <ContactList\n//             contacts={filteredContacts}\n//             onDelete={this.removeContact}\n//           />\n//         </Section>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from 'App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}